#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./release.sh [major|minor|patch] "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"

VERSION_TYPE=${1:-patch}
RELEASE_MESSAGE=${2:-"–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑"}

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ composer.json
CURRENT_VERSION=$(grep -o '"version": "[^"]*"' composer.json | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')

if [ -z "$CURRENT_VERSION" ]; then
    echo "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ composer.json"
    exit 1
fi

# –†–∞–∑–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=${VERSION_PARTS[2]}

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
case $VERSION_TYPE in
    major)
        MAJOR=$((MAJOR + 1))
        MINOR=0
        PATCH=0
        ;;
    minor)
        MINOR=$((MINOR + 1))
        PATCH=0
        ;;
    patch)
        PATCH=$((PATCH + 1))
        ;;
    *)
        echo "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: major, minor –∏–ª–∏ patch"
        exit 1
        ;;
esac

NEW_VERSION="$MAJOR.$MINOR.$PATCH"

echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å $CURRENT_VERSION –Ω–∞ $NEW_VERSION"

# –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ composer.json
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    sed -i '' "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" composer.json
else
    # Linux
    sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" composer.json
fi

# –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
git add composer.json
git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ $NEW_VERSION"

# –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
git tag -a "v$NEW_VERSION" -m "$RELEASE_MESSAGE"

# –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–µ–≥–∏
git push origin main
git push origin "v$NEW_VERSION"

echo "‚úÖ –†–µ–ª–∏–∑ v$NEW_VERSION —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
echo "üì¶ Packagist –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ webhook"